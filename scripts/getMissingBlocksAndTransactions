#!/usr/bin/env node

const { Framework } = require('@vechain/connex-framework')
const { Driver, SimpleNet } = require('@vechain/connex.driver-nodejs')
const moment = require('moment')

const { getBlock } = require('../server/lib/connex')
const client = require('../server/database')
const { oneDayAgo } = require('../server/lib/dateHelpers')

;(async function getMissinBlocksAndTransactions() {
  const driver = await Driver.connect(new SimpleNet('https://vethor-node.vechain.com/'))
  const thor = new Framework(driver).thor

  const oneDayAgoMinusAMinute = moment(oneDayAgo())
    .subtract(1, 'minutes')
    .toDate()
    .toISOString()

  const blockRecords = await client.query(
    `
      SELECT * FROM blocks WHERE blocks.timestamp > $1 ORDER BY number;
    `,
    [oneDayAgoMinusAMinute]
  )

  const missingBlocks = []
  blockRecords.forEach((record, index) => {
    if (!blockRecords[index + 1]) return
    const nextNumber = blockRecords[index + 1].number
    let cur  = record.number + 1
    if (cur === nextNumber) return
    while (nextNumber > cur) {
      missingBlocks.push(cur++)
    }
  })

  for (const num of missingBlocks) {
    console.log(`getting missing block -->`, num)
    await getBlock(thor, num, client)
  }

  const blocksWithMissingTransactions = await client.query(
    `
      SELECT count(transactions.id) AS count, blocks.number_of_transactions, blocks.number
      FROM transactions
      RIGHT JOIN blocks
      ON transactions.block_number = blocks.number
      WHERE blocks.timestamp > $1
      GROUP BY blocks.number_of_transactions, blocks.number
      HAVING count(transactions.id) < blocks.number_of_transactions;
    `,
    [oneDayAgoMinusAMinute]
  )
  for (const block of blocksWithMissingTransactions) {
    console.log(`block ${block.number} missing transactions`)
    await getBlock(thor, block.number, client)
  }

  process.exit(1)
})()
